from faker import Faker
import random
import pandas as pd
import uuid
from datetime import datetime
import DynamicMapping as dynamicmapping

# Initialize the Faker instance
fake = Faker()
model ={
        "personal_info_model" :[
        {"name": "Name", "type": "name"},
        {"name": "Gender", "type": "gender"},
        {"name": "SSN", "type": "ssn"},
        {"name": "Driving License", "type": "driving_license"},
        {"name": "Address", "type": "address", "address_format": "split"}
        ],
        "accounts_data_model":[
            {"name": "Account ID", "type": "uuid"},
            {"name": "User ID", "type": "uuid"},  
            {"name": "Account Type", "type": "choice", "choices": ["savings", "checking", "business"]},
            {"name": "Balance", "type": "number", "min": 1000, "max": 50000},
            {"name": "Creation Date", "type": "datetime"},
            {"name": "Is Verified", "type": "boolean"}  

        ],
        "Transaction_data_model":[
            {"name": "Transaction ID", "type": "uuid"},
            {"name": "User ID", "type": "uuid"},  
            {"name": "Trsansaction Type", "type": "choice", "choices": ["Buy", "Sell"]},
        ]
}


# Generate personal info data
personal_info_model = [
    {"name": "Name", "type": "name"},
    {"name": "Gender", "type": "gender"},
    {"name": "Email", "type": "email"},
    {"name": "Phone", "type": "phone"},
    {"name": "Company", "type": "company"},
    {"name": "Job Title", "type": "job"},
    {"name": "Date of Birth", "type": "date_of_birth"},
    {"name": "Is Active", "type": "boolean"},  # Boolean field
    {"name": "Salary", "type": "number", "min": 30000, "max": 150000},
    {"name": "Country", "type": "choice", "choices": ["USA", "Canada", "Germany", "UK", "India"]},
    {"name": "Credit Card", "type": "credit_card"},
    {"name": "Notes", "type": "text"},
    {"name": "Join Date", "type": "datetime"},
    {"name": "User UUID", "type": "uuid"},
    {"name": "IP Address", "type": "ip_address"},
    {"name": "File Path", "type": "file_path"},
    {"name": "Profile Image", "type": "image_url"},
    {"name": "Website", "type": "url"},
    {"name": "ID", "type": "id"},
    {"name": "Passport", "type": "passport"},
    {"name": "SSN", "type": "ssn"},
    {"name": "Driving License", "type": "driving_license"},
    {"name": "Address", "type": "address", "address_format": "split"}
]

# Generate accounts data
accounts_data_model = [
    {"name": "Account ID", "type": "uuid"},
    {"name": "User ID", "type": "uuid"},  # Link this to a person
    {"name": "Account Type", "type": "choice", "choices": ["savings", "checking", "business"]},
    {"name": "Balance", "type": "number", "min": 1000, "max": 50000},
    {"name": "Creation Date", "type": "datetime"},
    {"name": "Is Verified", "type": "boolean"}  # New Boolean field

]


# Step 1: Generate the personal data (100 records)
num_records = 100



def generate_dynamic_data(model_schemas):
    """
    Generate fake data dynamically for all given model schemas.
    
    :param model_schemas: A dictionary of model names with their respective field definitions.
    :return: A dictionary with fake data for each model.
    """
    fake_data = {}
    for model_name, schema in model_schemas.items():
        fake_data[model_name] = dynamicmapping.generate_data_from_model(schema,num_records)
        fakeDataGenerator=dynamicmapping.generate_data_from_model(schema,num_records)
        converttoDF=pd.DataFrame(fakeDataGenerator)
        converttoDF.to_csv(model_name+'.csv',index=False)
    
    return fake_data

#print(generate_dynamic_data(model))

def returnAPIResponse(accounts_data_model):
    print('calling Return API response')
    print(generate_dynamic_data(accounts_data_model))
    return 'Success'

'''
resp= returnAPIResponse(accounts_data_model)
print(resp)
'''